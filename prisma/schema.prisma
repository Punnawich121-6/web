// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  firebaseUid String   @unique
  email       String   @unique
  displayName String?
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdEquipment Equipment[] @relation("CreatedEquipment")
  borrowRequests   BorrowRequest[]
  approvedRequests BorrowRequest[] @relation("ApprovedRequests")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model Equipment {
  id            String            @id @default(uuid())
  name          String
  category      String
  description   String
  image         String?
  serialNumber  String            @unique
  location      String
  status        EquipmentStatus   @default(AVAILABLE)
  totalQuantity Int               @default(1)
  availableQuantity Int           @default(1)
  specifications Json?
  condition     String?
  purchaseDate  DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  createdBy     String
  creator       User              @relation("CreatedEquipment", fields: [createdBy], references: [id])
  borrowings    BorrowRequest[]
}

model BorrowRequest {
  id              String              @id @default(uuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  equipmentId     String
  equipment       Equipment           @relation(fields: [equipmentId], references: [id])
  quantity        Int                 @default(1)
  purpose         String
  startDate       DateTime
  endDate         DateTime
  actualReturnDate DateTime?
  status          BorrowStatus        @default(PENDING)
  notes           String?
  approvedBy      String?
  approver        User?               @relation("ApprovedRequests", fields: [approvedBy], references: [id])
  approvedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

enum EquipmentStatus {
  AVAILABLE
  BORROWED
  MAINTENANCE
  RETIRED
}

enum BorrowStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  RETURNED
  OVERDUE
}
